function    splitcondition(M_raw, motionref, maplocation, b_iter, summarypath) 
    
    % for one motion direction
    
    load('location2condition.mat')
    load(fullfile(summarypath,'summarydata'))
    
    idx = find(strcmp(location2condition.motion_ref, motionref));
    radialout_loc = location2condition.pos_w_radialout(idx);
    radialin_loc = location2condition.pos_w_radialin(idx);
    tangleft_loc = location2condition.pos_w_tang_left2motionv(idx);
    tangright_loc = location2condition.pos_w_tang_right2motionv(idx);
    inclock_loc = location2condition.pos_w_inclock(idx);
    outclock_loc = location2condition.pos_w_outclock(idx);
    incclock_loc = location2condition.pos_w_incclock(idx);
    outcclock_loc = location2condition.pos_w_outcclock(idx);
    
    % define condition based on the location within the session
    % each contain 200 trials (20 repeats of 10 +- tilt angles)
    M_radialout = [M_raw(M_raw(:,3) == radialout_loc,:)];
    M_radialin = [M_raw(M_raw(:,3) == radialin_loc,:)];
    M_tangleft = [M_raw(M_raw(:,3) == tangleft_loc,:)];
    M_tangright = [M_raw(M_raw(:,3) == tangright_loc,:)];
    M_inclock = [M_raw(M_raw(:,3) == inclock_loc,:)];
    M_outclock = [M_raw(M_raw(:,3) == outclock_loc,:)];
    M_incclock = [M_raw(M_raw(:,3) == incclock_loc,:)];
    M_outcclock = [M_raw(M_raw(:,3) == outcclock_loc,:)];
    
    % compute summary and add to predefined "condition" struct
    if ~ (isempty(M_radialout) && isempty(M_radialin) && isempty(M_tangright) && isempty(M_tangleft))
        [summary_radialout.(maplocation(radialout_loc)), ...
            summary_radialout.rownames, ...
            bootsummary_radialout.(maplocation(radialout_loc))] ...
            = compute_summary(M_radialout, b_iter); 

        [summary_radialin.(maplocation(radialin_loc)), ...
            summary_radialin.rownames, ...
            bootsummary_radialin.(maplocation(radialin_loc))] ...
            = compute_summary(M_radialin, b_iter);

        [summary_tangleft.(maplocation(tangleft_loc)), ...
            summary_tangleft.rownames, ...
            bootsummary_tangleft.(maplocation(tangleft_loc))] ...
            = compute_summary(M_tangleft, b_iter);

        [summary_tangright.(maplocation(tangright_loc)), ...
            summary_tangright.rownames, ...
            bootsummary_tangright.(maplocation(tangright_loc))] ...
            = compute_summary(M_tangright, b_iter);

        if b_iter == 0
            bootsummary_radialout = []; bootsummary_radialin = [];
            bootsummary_tangleft = []; bootsummary_tangright = [];
        end

        % create radial and tang (for analysis combining them)
        [summary_radial, summary_tang, bootsummary_radial, ...
        bootsummary_tang] = create2conditions(summary_radialout, summary_radialin, ...
            summary_tangleft, summary_tangright,bootsummary_radialout, ...
            bootsummary_radialin, bootsummary_tangleft, bootsummary_tangright);

        % save summarydata iteratively
        save(fullfile(summarypath,'summarydata'), 'summary_radialout',...
            'summary_radialin','summary_tangleft', 'summary_tangright',...
            'summary_radial','summary_tang', 'bootsummary_radialout', ...
            'bootsummary_radialin', 'bootsummary_tangleft', ...
            'bootsummary_tangright','bootsummary_radial','bootsummary_tang')
        
    elseif ~ (isempty(M_inclock) && isempty(M_outclock) && isempty(M_incclock) && isempty(M_outcclock))

        [summary_inclock.(maplocation(inclock_loc)), ...
        summary_inclock.rownames, ...
        bootsummary_inclock.(maplocation(inclock_loc))] ...
        = compute_summary(M_inclock, b_iter); 

        [summary_outclock.(maplocation(outclock_loc)), ...
        summary_outclock.rownames, ...
        bootsummary_outclock.(maplocation(outclock_loc))] ...
        = compute_summary(M_outclock, b_iter); 

        [summary_incclock.(maplocation(incclock_loc)), ...
        summary_incclock.rownames, ...
        bootsummary_incclock.(maplocation(incclock_loc))] ...
        = compute_summary(M_incclock, b_iter); 

        [summary_outcclock.(maplocation(outcclock_loc)), ...
        summary_outcclock.rownames, ...
        bootsummary_outcclock.(maplocation(outcclock_loc))] ...
        = compute_summary(M_outcclock, b_iter); 

        if b_iter == 0
            bootsummary_inclock = []; bootsummary_outclock = [];
            bootsummary_incclock = []; bootsummary_outcclock = [];
        end

        % IF I USE THIS FUNCTION, MAKE SURE IT WORKS FOR THESE CONDITIONS!
        % create in and out? (for analysis combining them)
        %[summary_in, summary_out, bootsummary_in, ...
        %bootsummary_out] = create2conditions(summary_inclock, summary_outclock, ...
        %    summary_incclock, summary_outcclock,bootsummary_inclock, ...
        %    bootsummary_outclock, bootsummary_outcclock, bootsummary_incclock);

        % save summarydata iteratively
        save(fullfile(summarypath,'summarydata'), 'summary_inclock',...
            'summary_outclock','summary_incclock', 'summary_outcclock',...
            'bootsummary_inclock', 'bootsummary_outclock', 'bootsummary_incclock', ...
            'bootsummary_outcclock')
    end
