function   [summary_radialout, summary_radialin, summary_tangleft, ...
            summary_tangright, bootsummary_radialout,bootsummary_radialin, ...
            bootsummary_tangleft, bootsummary_tangright] = splitcondition(M_raw, ... 
            motionref, maplocation, summary_radialout, summary_radialin, ...
            summary_tangleft, summary_tangright, bootsummary_radialout, ...
            bootsummary_radialin, bootsummary_tangleft, bootsummary_tangright, b_iter)
    
    load('location2condition.mat')
    idx = find(strcmp(location2condition.motion_ref, motionref));
    radialout_loc = location2condition.pos_w_radialout(idx);
    radialin_loc = location2condition.pos_w_radialin(idx);
    tangleft_loc = location2condition.pos_w_tang_left2motionv(idx);
    tangright_loc = location2condition.pos_w_tang_right2motionv(idx);
    
    % define condition based on the location within the session
    % each contain 200 trials (20 repeats of 10 +- tilt angles)
    M_radialout = [M_raw(M_raw(:,3) == radialout_loc,:)];
    M_radialin = [M_raw(M_raw(:,3) == radialin_loc,:)];
    M_tangleft = [M_raw(M_raw(:,3) == tangleft_loc,:)];
    M_tangright = [M_raw(M_raw(:,3) == tangright_loc,:)];
    
    % compute summary and add to predefined "condition" struct
    [summary_radialout.(maplocation(radialout_loc)), ...
        summary_radialout.rownames, ...
        bootsummary_radialout.(maplocation(radialout_loc))] ...
        = compute_summary(M_radialout, b_iter); 
    
    [summary_radialin.(maplocation(radialin_loc)), ...
        summary_radialin.rownames, ...
        bootsummary_radialin.(maplocation(radialin_loc))] ...
        = compute_summary(M_radialin, b_iter);
    
    [summary_tangleft.(maplocation(tangleft_loc)), ...
        summary_tangleft.rownames, ...
        bootsummary_tangleft.(maplocation(tangleft_loc))] ...
        = compute_summary(M_tangleft, b_iter);
    
    [summary_tangright.(maplocation(tangright_loc)), ...
        summary_tangright.rownames, ...
        bootsummary_tangright.(maplocation(tangright_loc))] ...
        = compute_summary(M_tangright, b_iter);
    
    if b_iter == 0
        bootsummary_radialout = []; bootsummary_radialin = [];
        bootsummary_tangleft = []; bootsummary_tangright = [];
    end
end